package org.web3j.model;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int192;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.StaticArray31;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint80;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class TestOffchainAggregator extends Contract {
    public static final String BINARY = "6101006040523480156200001257600080fd5b5060405162005f1038038062005f1083398181016040526101408110156200003957600080fd5b5080516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b0151610120909b015187518089019098526004885263151154d560e21b99880199909952600080546001600160a01b03191633178155999a97999598949793969295919490939290918b918b918b918b918b918b918b918b918b918b91908b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b8b89620000e587878787876200024d565b620000f0816200033f565b6001600160601b0319606083901b166080526200010c620005d6565b62000116620005d6565b60005b601f8160ff16101562000166576001838260ff16601f81106200013857fe5b61ffff909216602092909202015260018260ff8316601f81106200015857fe5b602002015260010162000119565b5062000176600483601f620005f5565b5062000186600882601f62000692565b505050505060f887901b7fff000000000000000000000000000000000000000000000000000000000000001660e05250508351620001cf9350602f9250602085019150620006c3565b50620001db83620003b8565b620001e860008062000490565b8560170b60a08160170b60401b815250508460170b60c08160170b60401b815250505050505050505050505050506001603060006101000a81548160ff021916908315150217905550505050505050505050505050505050505050505050506200075c565b6040805160a0808201835263ffffffff88811680845288821660208086018290528984168688018190528985166060808901829052958a1660809889018190526002805463ffffffff1916871763ffffffff60201b191664010000000087021763ffffffff60401b19166801000000000000000085021763ffffffff60601b19166c0100000000000000000000000084021763ffffffff60801b1916600160801b830217905589519586529285019390935283880152928201529283015291517fd0d9486a2c673e2a4b57fc82e4c8a556b3e2b82dd5db07e2c04a920ca0f469b6929181900390910190a15050505050565b6003546001600160a01b039081169082168114620003b457600380546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d489129281900390910190a15b5050565b6000546001600160a01b0316331462000418576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b602e546001600160a01b039081169082168114620003b457602e80546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f27b89aede8b560578baaa25ee5ce3852c5eecad1e114b941bbd89e1eb4bae6349281900390910190a15050565b6000546001600160a01b03163314620004f0576040805162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015290519081900360640190fd5b60408051808201909152602d546001600160a01b03808216808452600160a01b90920463ffffffff16602084015284161415806200053e57508163ffffffff16816020015163ffffffff1614155b15620005d1576040805180820182526001600160a01b0385811680835263ffffffff8681166020948501819052602d80546001600160a01b031916841763ffffffff60a01b1916600160a01b8302179055865187860151875193168352948201528451919493909216927fb04e3a37abe9c0fcdfebdeae019a8e2b12ddf53f5d55ffb0caccc1bedaca1541928290030190a35b505050565b604051806103e00160405280601f906020820280368337509192915050565b600283019183908215620006805791602002820160005b838211156200064e57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026200060c565b80156200067e5782816101000a81549061ffff02191690556002016020816001010492830192600103026200064e565b505b506200068e92915062000745565b5090565b82601f810192821562000680579160200282015b8281111562000680578251825591602001919060010190620006a6565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620006fb576000855562000680565b82601f106200071657805160ff191683800117855562000680565b8280016001018555821562000680579182018281111562000680578251825591602001919060010190620006a6565b5b808211156200068e576000815560010162000746565b60805160601c60a05160401c60c05160401c60e05160f81c61574a620007c6600039806112c7525080611d0b528061381d52508061124252806137f052508061121e52806127965280612c525280612d395280613b8452806145f45280614df4525061574a6000f3fe608060405234801561001057600080fd5b50600436106103835760003560e01c80638da5cb5b116101de578063bd8247061161010f578063e4902f82116100ad578063f2fde38b1161007c578063f2fde38b14610fad578063fa98a1c714610fd3578063fbffd2c114610ffc578063feaf968c1461102257610383565b8063e4902f8214610ed6578063e5fe457714610efc578063eb45716314610f4d578063eb5dcd6c14610f7f57610383565b8063d09dc339116100e9578063d09dc33914610e6a578063d18bf87e14610e72578063dc7f012414610ea2578063e285191114610eaa57610383565b8063bd82470614610ceb578063c107532914610d30578063c980753914610d5c57610383565b80639e3ceeab1161017c578063acfe7f9c11610156578063acfe7f9c14610c6e578063b121e14714610c8b578063b5ab58dc14610cb1578063b633620c14610cce57610383565b80639e3ceeab14610bfc5780639eb6e06014610c22578063a118f24914610c4857610383565b8063996e8298116101b8578063996e829814610a8c5780639a6fc8f514610a945780639b764d9714610afe5780639c849b3014610b3e57610383565b80638da5cb5b14610a305780638e0566de14610a3857806398e5b12a14610a6857610383565b8063668a0f02116102b857806379ba50971161025657806381ff70481161023057806381ff7048146109a35780638205bf6a146109dc5780638823da6c146109e45780638ac28d5a14610a0a57610383565b806379ba50971461093b5780638038e4a114610943578063814118341461094b57610383565b806370da2f671161029257806370da2f67146108d857806370efdf2d146108e05780637284e416146108e857806377096177146108f057610383565b8063668a0f02146107e357806366cfeaf1146107eb5780636b14daf81461081057610383565b806329937268116103255780633c04967b116102ff5780633c04967b146105ff57806350d25bcd146106ad57806354fd4d50146106b5578063585aa7de146106bd57610383565b8063299372681461049a578063313ce567146104db5780633b5cdfa2146104f957610383565b8063102a474b11610361578063102a474b146103d2578063181f5a77146103da5780631b6b6d231461045757806322adbc781461047b57610383565b80630a756983146103885780630b69df86146103925780630eafb25b146103ac575b600080fd5b61039061102a565b005b61039a6110b8565b60408051918252519081900360200190f35b61039a600480360360208110156103c257600080fd5b50356001600160a01b03166110be565b61039a6111ed565b6103e26111fc565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561041c578181015183820152602001610404565b50505050905090810190601f1680156104495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61045f61121c565b604080516001600160a01b039092168252519081900360200190f35b610483611240565b6040805160179290920b8252519081900360200190f35b6104a2611264565b6040805163ffffffff96871681529486166020860152928516848401529084166060840152909216608082015290519081900360a00190f35b6104e36112c5565b6040805160ff9092168252519081900360200190f35b61059d6004803603602081101561050f57600080fd5b810190602081018135600160201b81111561052957600080fd5b82018360208201111561053b57600080fd5b803590602001918460018302840111600160201b8311171561055c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506112e9945050505050565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156105e95781810151838201526020016105d1565b5050505090500194505050505060405180910390f35b610607611304565b60405180886103e080838360005b8381101561062d578181015183820152602001610615565b5050505090500187601f60200280838360005b83811015610658578181015183820152602001610640565b505050509050018663ffffffff1681526020018563ffffffff1681526020018463ffffffff1681526020018363ffffffff1681526020018263ffffffff16815260200197505050505050505060405180910390f35b61039a611425565b61039a6114ad565b610390600480360360a08110156106d357600080fd5b810190602081018135600160201b8111156106ed57600080fd5b8201836020820111156106ff57600080fd5b803590602001918460208302840111600160201b8311171561072057600080fd5b919390929091602081019035600160201b81111561073d57600080fd5b82018360208201111561074f57600080fd5b803590602001918460208302840111600160201b8311171561077057600080fd5b9193909260ff833516926001600160401b03602082013516929190606081019060400135600160201b8111156107a557600080fd5b8201836020820111156107b757600080fd5b803590602001918460018302840111600160201b831117156107d857600080fd5b5090925090506114b2565b61039a611c50565b6107f3611cd8565b604080516001600160801b03199092168252519081900360200190f35b6108c46004803603604081101561082657600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561085057600080fd5b82018360208201111561086257600080fd5b803590602001918460018302840111600160201b8311171561088357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611ce1945050505050565b604080519115158252519081900360200190f35b610483611d09565b61045f611d2d565b6103e2611d3c565b61091f6004803603608081101561090657600080fd5b5080359060208101359060408101359060600135611dc4565b604080516001600160801b039092168252519081900360200190f35b610390611ddb565b610390611e8a565b610953611f19565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561098f578181015183820152602001610977565b505050509050019250505060405180910390f35b6109ab611f7b565b6040805163ffffffff94851681529290931660208301526001600160801b0319168183015290519081900360600190f35b61039a611f9b565b610390600480360360208110156109fa57600080fd5b50356001600160a01b0316612023565b61039060048036036020811015610a2057600080fd5b50356001600160a01b03166120ea565b61045f612161565b610a40612170565b604080516001600160a01b03909316835263ffffffff90911660208301528051918290030190f35b610a706121a3565b604080516001600160501b039092168252519081900360200190f35b61045f612376565b610aba60048036036020811015610aaa57600080fd5b50356001600160501b0316612385565b60405180866001600160501b03168152602001858152602001848152602001838152602001826001600160501b031681526020019550505050505060405180910390f35b610b2760048036036040811015610b1457600080fd5b5061ffff81358116916020013516612426565b6040805161ffff9092168252519081900360200190f35b61039060048036036040811015610b5457600080fd5b810190602081018135600160201b811115610b6e57600080fd5b820183602082011115610b8057600080fd5b803590602001918460208302840111600160201b83111715610ba157600080fd5b919390929091602081019035600160201b811115610bbe57600080fd5b820183602082011115610bd057600080fd5b803590602001918460208302840111600160201b83111715610bf157600080fd5b509092509050612432565b61039060048036036020811015610c1257600080fd5b50356001600160a01b0316612635565b61045f60048036036020811015610c3857600080fd5b50356001600160a01b03166126fa565b61039060048036036020811015610c5e57600080fd5b50356001600160a01b0316612718565b61039060048036036020811015610c8457600080fd5b503561276e565b61039060048036036020811015610ca157600080fd5b50356001600160a01b031661280d565b61039a60048036036020811015610cc757600080fd5b50356128ee565b61039a60048036036020811015610ce457600080fd5b5035612977565b610390600480360360a0811015610d0157600080fd5b5063ffffffff813581169160208101358216916040820135811691606081013582169160809091013516612a00565b61039060048036036040811015610d4657600080fd5b506001600160a01b038135169060200135612b2f565b61039060048036036080811015610d7257600080fd5b810190602081018135600160201b811115610d8c57600080fd5b820183602082011115610d9e57600080fd5b803590602001918460018302840111600160201b83111715610dbf57600080fd5b919390929091602081019035600160201b811115610ddc57600080fd5b820183602082011115610dee57600080fd5b803590602001918460208302840111600160201b83111715610e0f57600080fd5b919390929091602081019035600160201b811115610e2c57600080fd5b820183602082011115610e3e57600080fd5b803590602001918460208302840111600160201b83111715610e5f57600080fd5b919350915035612e31565b61039a613b7f565b61039060048036036040811015610e8857600080fd5b5080356001600160a01b0316906020013561ffff16613c30565b6108c4613c87565b61039060048036036040811015610ec057600080fd5b506001600160a01b038135169060200135613c90565b610b2760048036036020811015610eec57600080fd5b50356001600160a01b0316613d37565b610f04613de4565b604080516001600160801b0319909616865263ffffffff909416602086015260ff9092168484015260170b60608401526001600160401b03166080830152519081900360a00190f35b61039060048036036040811015610f6357600080fd5b5080356001600160a01b0316906020013563ffffffff16613e94565b61039060048036036040811015610f9557600080fd5b506001600160a01b0381358116916020013516613fc4565b61039060048036036020811015610fc357600080fd5b50356001600160a01b0316614107565b61039a60048036036060811015610fe957600080fd5b50803590602081013590604001356141a5565b6103906004803603602081101561101257600080fd5b50356001600160a01b03166141ba565b610aba614210565b6000546001600160a01b03163314611077576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b60305460ff16156110b6576030805460ff191690556040517f3be8a977a014527b50ae38adda80b56911c267328965c98ddc385d248f53963890600090a15b565b61179390565b6001600160a01b03811660009081526027602090815260408083208151808301909252805460ff80821684528594840191610100900416600281111561110057fe5b600281111561110b57fe5b905250905060008160200151600281111561112257fe5b14156111325760009150506111e8565b6040805160a08101825260025463ffffffff8082168352600160201b820481166020840152600160401b8204811693830193909352600160601b8104831660608301819052600160801b90910490921660808201528251909160009160019060049060ff16601f81106111a157fe5b601091828204019190066002029054906101000a900461ffff160361ffff1602633b9aca0002905060016008846000015160ff16601f81106111df57fe5b01540301925050505b919050565b60006111f76142af565b905090565b60606040518060600160405280602881526020016156ed60289139905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040805160a08101825260025463ffffffff808216808452600160201b8304821660208501819052600160401b84048316958501869052600160601b8404831660608601819052600160801b90940490921660809094018490529490939290565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060606112f784614463565b9250925092509193909250565b61130c61553e565b61131461553e565b6040805160a08101825260025463ffffffff808216808452600160201b8304821660208501819052600160401b84048316858701819052600160601b8504841660608701819052600160801b9095049093166080860181905286516103e081019097526000968796879687968796929560049560089591939187601f8282826020028201916000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161139d575050604080516103e0810191829052959c508b9450601f93509150839050845b8154815260200190600101908083116113f3575050505050955097509750975097509750975097505090919293949596565b6000611468336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b6114a5576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6111f7614522565b600481565b868560ff8616601f831115611501576040805162461bcd60e51b815260206004820152601060248201526f746f6f206d616e79207369676e65727360801b604482015290519081900360640190fd5b60008111611556576040805162461bcd60e51b815260206004820152601a60248201527f7468726573686f6c64206d75737420626520706f736974697665000000000000604482015290519081900360640190fd5b8183146115945760405162461bcd60e51b81526004018080602001828103825260248152602001806156a96024913960400191505060405180910390fd5b8060030283116115eb576040805162461bcd60e51b815260206004820181905260248201527f6661756c74792d6f7261636c65207468726573686f6c6420746f6f2068696768604482015290519081900360640190fd5b6000546001600160a01b03163314611638576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b6028541561173557602880546000198101916000918390811061165757fe5b6000918252602082200154602980546001600160a01b039092169350908490811061167e57fe5b6000918252602090912001546001600160a01b0316905061169e8161454b565b6001600160a01b03808316600090815260276020526040808220805461ffff19908116909155928416825290208054909116905560288054806116dd57fe5b600082815260209020810160001990810180546001600160a01b0319169055019055602980548061170a57fe5b600082815260209020810160001990810180546001600160a01b031916905501905550611638915050565b60005b8a811015611a91576000602760008e8e8581811061175257fe5b602090810292909201356001600160a01b031683525081019190915260400160002054610100900460ff16600281111561178857fe5b146117da576040805162461bcd60e51b815260206004820152601760248201527f7265706561746564207369676e65722061646472657373000000000000000000604482015290519081900360640190fd5b6040805180820190915260ff8216815260016020820152602760008e8e8581811061180157fe5b602090810292909201356001600160a01b0316835250818101929092526040016000208251815460ff191660ff90911617808255918301519091829061ff00191661010083600281111561185157fe5b02179055506000915060069050818c8c8581811061186b57fe5b6001600160a01b03602091820293909301358316845283019390935260409091016000205416919091141590506118dd576040805162461bcd60e51b81526020600482015260116024820152701c185e5959481b5d5cdd081899481cd95d607a1b604482015290519081900360640190fd5b6000602760008c8c858181106118ef57fe5b602090810292909201356001600160a01b031683525081019190915260400160002054610100900460ff16600281111561192557fe5b14611977576040805162461bcd60e51b815260206004820152601c60248201527f7265706561746564207472616e736d6974746572206164647265737300000000604482015290519081900360640190fd5b6040805180820190915260ff8216815260026020820152602760008c8c8581811061199e57fe5b602090810292909201356001600160a01b0316835250818101929092526040016000208251815460ff191660ff90911617808255918301519091829061ff0019166101008360028111156119ee57fe5b021790555090505060288c8c83818110611a0457fe5b835460018101855560009485526020948590200180546001600160a01b0319166001600160a01b03959092029390930135939093169290921790555060298a8a83818110611a4e57fe5b835460018181018655600095865260209586902090910180546001600160a01b0319166001600160a01b0396909302949094013594909416179091555001611738565b50602a805460ff8916600160a81b0260ff60a81b19909116179055602c80544363ffffffff908116600160201b90810267ffffffff0000000019841617808316600101831663ffffffff19909116179384905590910481169116611afd30828f8f8f8f8f8f8f8f614751565b602a60000160006101000a8154816001600160801b03021916908360801c02179055506000602a60000160106101000a81548164ffffffffff021916908364ffffffffff1602179055507f25d719d88a4512dd76c7442b910a83360845505894eb444ef299409e180f8fb982828f8f8f8f8f8f8f8f604051808b63ffffffff1681526020018a6001600160401b0316815260200180602001806020018760ff168152602001866001600160401b031681526020018060200184810384528c8c82818152602001925060200280828437600083820152601f01601f191690910185810384528a8152602090810191508b908b0280828437600083820152601f01601f191690910185810383528681526020019050868680828437600083820152604051601f909101601f19169092018290039f50909d5050505050505050505050505050a150505050505050505050505050565b6000611c93336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b611cd0576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6111f7614853565b602a5460801b90565b6000611ced8383614866565b80611d0057506001600160a01b03831632145b90505b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b602e546001600160a01b031690565b6060611d7f336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b611dbc576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6111f7614896565b6000611dd285858585614923565b95945050505050565b6001546001600160a01b03163314611e33576040805162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b604482015290519081900360640190fd5b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b6000546001600160a01b03163314611ed7576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b60305460ff166110b6576030805460ff191660011790556040517faebf329500988c6488a0074e5a0a9ff304561fc5c6fc877aeb1d59c8282c348090600090a1565b60606029805480602002602001604051908101604052809291908181526020018280548015611f7157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611f53575b5050505050905090565b602c54602a5463ffffffff80831692600160201b9004169060801b909192565b6000611fde336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b61201b576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b6111f76149a6565b6000546001600160a01b03163314612070576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526031602052604090205460ff16156120e7576001600160a01b038116600081815260316020908152604091829020805460ff19169055815192835290517f3d68a6fce901d20453d1a7aa06bf3950302a735948037deb182a8db66df2a0d19281900390910190a15b50565b6001600160a01b03818116600090815260066020526040902054163314612158576040805162461bcd60e51b815260206004820152601760248201527f4f6e6c792070617965652063616e207769746864726177000000000000000000604482015290519081900360640190fd5b6120e78161454b565b6000546001600160a01b031681565b60408051808201909152602d546001600160a01b038116808352600160a01b90910463ffffffff16602090920182905291565b600080546001600160a01b03163314806122665750602e5460408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b0390951694636b14daf894929360009391929190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b15801561223957600080fd5b505afa15801561224d573d6000803e3d6000fd5b505050506040513d602081101561226357600080fd5b50515b6122b7576040805162461bcd60e51b815260206004820152601d60248201527f4f6e6c79206f776e6572267265717565737465722063616e2063616c6c000000604482015290519081900360640190fd5b6040805160808082018352602a549081901b6001600160801b031916808352600160801b820464ffffffffff8116602080860191909152600160a81b840460ff90811686880152600160b01b90940463ffffffff9081166060808801919091528751948552600884901c909116918401919091529216818501529251919233927f3ea16a923ff4b1df6526e854c9e3a995c43385d70e73359e10623c74f0b52037929181900390910190a2806060015160010163ffffffff1691505090565b6003546001600160a01b031690565b60008060008060006123ce336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b61240b576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b612414866149d8565b939a9299509097509550909350915050565b6000611d008383614afc565b6000546001600160a01b0316331461247f576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b8281146124d3576040805162461bcd60e51b815260206004820181905260248201527f7472616e736d6974746572732e73697a6520213d207061796565732e73697a65604482015290519081900360640190fd5b60005b8381101561262e5760008585838181106124ec57fe5b905060200201356001600160a01b03169050600084848481811061250c57fe5b6001600160a01b0385811660009081526006602090815260409091205492029390930135831693509091169050801580806125585750826001600160a01b0316826001600160a01b0316145b61259d576040805162461bcd60e51b81526020600482015260116024820152701c185e595948185b1c9958591e481cd95d607a1b604482015290519081900360640190fd5b6001600160a01b03848116600090815260066020526040902080546001600160a01b0319168583169081179091559083161461261e57826001600160a01b0316826001600160a01b0316856001600160a01b03167f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b360405160405180910390a45b5050600190920191506124d69050565b5050505050565b6000546001600160a01b03163314612682576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b602e546001600160a01b0390811690821681146126f657602e80546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f27b89aede8b560578baaa25ee5ce3852c5eecad1e114b941bbd89e1eb4bae6349281900390910190a15b5050565b6001600160a01b039081166000908152600660205260409020541690565b6000546001600160a01b03163314612765576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b6120e781614b14565b6040805163a9059cbb60e01b8152600160048201526024810183905290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a9059cbb9160448083019260209291908290030181600087803b1580156127de57600080fd5b505af11580156127f2573d6000803e3d6000fd5b505050506040513d602081101561280857600080fd5b505050565b6001600160a01b0381811660009081526007602052604090205416331461287b576040805162461bcd60e51b815260206004820152601f60248201527f6f6e6c792070726f706f736564207061796565732063616e2061636365707400604482015290519081900360640190fd5b6001600160a01b0381811660008181526006602090815260408083208054336001600160a01b031980831682179093556007909452828520805490921690915590519416939092849290917f78af32efdcad432315431e9b03d27e6cd98fb79c405fdc5af7c1714d9c0f75b39190a45050565b6000612931336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b61296e576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b611d0382614b8f565b60006129ba336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b6129f7576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b611d0382614bc5565b6003546000546001600160a01b039182169116331480612ac1575060408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b03861694636b14daf8946000939190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b158015612a9457600080fd5b505afa158015612aa8573d6000803e3d6000fd5b505050506040513d6020811015612abe57600080fd5b50515b612b12576040805162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c604482015290519081900360640190fd5b612b1a614c04565b612b278686868686614fa2565b505050505050565b6000546001600160a01b0316331480612bf1575060035460408051630d629b5f60e31b815233600482018181526024830193845236604484018190526001600160a01b0390951694636b14daf894929360009391929190606401848480828437600083820152604051601f909101601f1916909201965060209550909350505081840390508186803b158015612bc457600080fd5b505afa158015612bd8573d6000803e3d6000fd5b505050506040513d6020811015612bee57600080fd5b50515b612c42576040805162461bcd60e51b815260206004820181905260248201527f4f6e6c79206f776e65722662696c6c696e6741646d696e2063616e2063616c6c604482015290519081900360640190fd5b6000612c4c6142af565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612cbd57600080fd5b505afa158015612cd1573d6000803e3d6000fd5b505050506040513d6020811015612ce757600080fd5b5051905081811015612d37576040805162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b604482015290519081900360640190fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb85612d738585038761508b565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612db957600080fd5b505af1158015612dcd573d6000803e3d6000fd5b505050506040513d6020811015612de357600080fd5b5051612e2b576040805162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015290519081900360640190fd5b50505050565b60005a9050612e448888888888886150a2565b3614612e97576040805162461bcd60e51b815260206004820152601960248201527f7472616e736d6974206d65737361676520746f6f206c6f6e6700000000000000604482015290519081900360640190fd5b612e9f61555d565b6040805160808082018352602a549081901b6001600160801b0319168252600160801b810464ffffffffff166020830152600160a81b810460ff1692820192909252600160b01b90910463ffffffff166060808301919091529082526000908a908a90811015612f0e57600080fd5b813591602081013591810190606081016040820135600160201b811115612f3457600080fd5b820183602082011115612f4657600080fd5b803590602001918460208302840111600160201b83111715612f6757600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050505060408801525050506080840182905283515190925060589190911b906001600160801b031980831691161461300e576040805162461bcd60e51b81526020600482015260156024820152740c6dedcccd2ce88d2cecae6e840dad2e6dac2e8c6d605b1b604482015290519081900360640190fd5b608083015183516020015164ffffffffff808316911610613065576040805162461bcd60e51b815260206004820152600c60248201526b1cdd185b19481c995c1bdc9d60a21b604482015290519081900360640190fd5b83516040015160ff1689116130b9576040805162461bcd60e51b81526020600482015260156024820152746e6f7420656e6f756768207369676e61747572657360581b604482015290519081900360640190fd5b601f891115613105576040805162461bcd60e51b8152602060048201526013602482015272746f6f206d616e79207369676e61747572657360681b604482015290519081900360640190fd5b868914613159576040805162461bcd60e51b815260206004820152601e60248201527f7369676e617475726573206f7574206f6620726567697374726174696f6e0000604482015290519081900360640190fd5b601f84604001515111156131b4576040805162461bcd60e51b815260206004820152601e60248201527f6e756d206f62736572766174696f6e73206f7574206f6620626f756e64730000604482015290519081900360640190fd5b83600001516040015160020260ff168460400151511161321b576040805162461bcd60e51b815260206004820152601e60248201527f746f6f206665772076616c75657320746f207472757374206d656469616e0000604482015290519081900360640190fd5b886001600160401b038111801561323157600080fd5b506040519080825280601f01601f19166020018201604052801561325c576020820181803683370190505b50606085015260005b60ff81168a11156132b557868160ff166020811061327f57fe5b1a60f81b85606001518260ff168151811061329657fe5b60200101906001600160f81b031916908160001a905350600101613265565b508360400151516001600160401b03811180156132d157600080fd5b506040519080825280601f01601f1916602001820160405280156132fc576020820181803683370190505b50602085015261330a61553e565b60005b8560400151518160ff1610156133f8576000858260ff166020811061332e57fe5b1a90508281601f811061333d57fe5b602002015115613394576040805162461bcd60e51b815260206004820152601760248201527f6f6273657276657220696e646578207265706561746564000000000000000000604482015290519081900360640190fd5b6001838260ff16601f81106133a557fe5b91151560209283029190910152869060ff84169081106133c157fe5b1a60f81b87602001518360ff16815181106133d857fe5b60200101906001600160f81b031916908160001a9053505060010161330d565b503360009081526027602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561343657fe5b600281111561344157fe5b905250905060028160200151600281111561345857fe5b14801561348c57506029816000015160ff168154811061347457fe5b6000918252602090912001546001600160a01b031633145b6134dd576040805162461bcd60e51b815260206004820152601860248201527f756e617574686f72697a6564207472616e736d69747465720000000000000000604482015290519081900360640190fd5b5050835164ffffffffff90911660209091015250506040516000908a908a90808383808284376040519201829003909120945061351e935061553e92505050565b613526615591565b60005b898110156137165760006001858760600151848151811061354657fe5b60209101015160f81c601b018e8e8681811061355e57fe5b905060200201358d8d8781811061357157fe5b9050602002013560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156135cc573d6000803e3d6000fd5b505060408051601f198101516001600160a01b03811660009081526027602090815290849020838501909452835460ff8082168552929650929450840191610100900416600281111561361b57fe5b600281111561362657fe5b905250925060018360200151600281111561363d57fe5b1461368f576040805162461bcd60e51b815260206004820152601e60248201527f61646472657373206e6f7420617574686f72697a656420746f207369676e0000604482015290519081900360640190fd5b8251849060ff16601f81106136a057fe5b6020020151156136ee576040805162461bcd60e51b81526020600482015260146024820152736e6f6e2d756e69717565207369676e617475726560601b604482015290519081900360640190fd5b600184846000015160ff16601f811061370357fe5b9115156020909202015250600101613529565b5050505060005b6001826040015151038110156137c75760008260400151826001018151811061374257fe5b602002602001015160170b8360400151838151811061375d57fe5b602002602001015160170b13159050806137be576040805162461bcd60e51b815260206004820152601760248201527f6f62736572766174696f6e73206e6f7420736f72746564000000000000000000604482015290519081900360640190fd5b5060010161371d565b506040810151805160009190600281049081106137e057fe5b602002602001015190508060170b7f000000000000000000000000000000000000000000000000000000000000000060170b1315801561384657507f000000000000000000000000000000000000000000000000000000000000000060170b8160170b13155b613897576040805162461bcd60e51b815260206004820152601e60248201527f6d656469616e206973206f7574206f66206d696e2d6d61782072616e67650000604482015290519081900360640190fd5b81516060908101805163ffffffff60019091018116909152604080518082018252601785810b8083526001600160401b0342811660208086019182528a5189015188166000908152602b8252878120965187549351909416600160c01b029390950b6001600160c01b039081166001600160c01b03199093169290921790911691909117909355875186015184890151848a01516080808c015188519586523386890181905291860181905260a0988601898152845199870199909952835194909916997ff6a97944f31ea060dfde0566e4167c1a1082551e64b60ecb14d599a9d023d451998c999298949793969095909492939185019260c086019289820192909102908190849084905b838110156139bb5781810151838201526020016139a3565b50505050905001838103825285818151815260200191508051906020019080838360005b838110156139f75781810151838201526020016139df565b50505050905090810190601f168015613a245780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a281516060015160408051428152905160009263ffffffff16917f0109fc6f55cf40689f02fbaad7af7fe7bbac8a3d2186600afc7d3e10cac60271919081900360200190a381600001516060015163ffffffff168160170b7f0559884fd3a460db3073b7fc896cc77986f16e378210ded43186175bf646fc5f426040518082815260200191505060405180910390a3613ad98260000151606001518260170b6150ba565b5080518051602a8054602084015160408501516060909501516001600160801b031990921660809490941c9390931764ffffffffff60801b1916600160801b64ffffffffff909416939093029290921760ff60a81b1916600160a81b60ff909416939093029290921763ffffffff60b01b1916600160b01b63ffffffff92831602179091558210613b6657fe5b613b748282602001516151b2565b505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015613bef57600080fd5b505afa158015613c03573d6000803e3d6000fd5b505050506040513d6020811015613c1957600080fd5b505190506000613c276142af565b90910391505090565b6001600160a01b038216600090815260276020526040902054600182019060049060ff16601f8110613c5e57fe5b601091828204019190066002026101000a81548161ffff021916908361ffff1602179055505050565b60305460ff1681565b60006001600160a01b038316600090815260276020526040902054610100900460ff166002811115613cbe57fe5b1415613d03576040805162461bcd60e51b815260206004820152600f60248201526e30b2323932b9b9903ab735b737bbb760891b604482015290519081900360640190fd5b6001600160a01b038216600090815260276020526040902054600182019060089060ff16601f8110613d3157fe5b01555050565b6001600160a01b03811660009081526027602090815260408083208151808301909252805460ff808216845285948401916101009004166002811115613d7957fe5b6002811115613d8457fe5b9052509050600081602001516002811115613d9b57fe5b1415613dab5760009150506111e8565b60016004826000015160ff16601f8110613dc157fe5b601091828204019190066002029054906101000a900461ffff1603915050919050565b600080808080333214613e35576040805162461bcd60e51b81526020600482015260146024820152734f6e6c792063616c6c61626c6520627920454f4160601b604482015290519081900360640190fd5b5050602a5463ffffffff600160b01b820481166000908152602b6020526040902054608083901b96600160801b909304600881901c909216955064ffffffffff9091169350601781900b9250600160c01b90046001600160401b031690565b6000546001600160a01b03163314613ee1576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b60408051808201909152602d546001600160a01b03808216808452600160a01b90920463ffffffff1660208401528416141580613f2e57508163ffffffff16816020015163ffffffff1614155b15612808576040805180820182526001600160a01b0385811680835263ffffffff8681166020948501819052602d80546001600160a01b031916841763ffffffff60a01b1916600160a01b8302179055865187860151875193168352948201528451919493909216927fb04e3a37abe9c0fcdfebdeae019a8e2b12ddf53f5d55ffb0caccc1bedaca1541928290030190a3505050565b6001600160a01b03828116600090815260066020526040902054163314614032576040805162461bcd60e51b815260206004820152601d60248201527f6f6e6c792063757272656e742070617965652063616e20757064617465000000604482015290519081900360640190fd5b336001600160a01b0382161415614090576040805162461bcd60e51b815260206004820152601760248201527f63616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015290519081900360640190fd5b6001600160a01b03808316600090815260076020526040902080548383166001600160a01b031982168117909255909116908114612808576040516001600160a01b038084169133918616907f84f7c7c80bb8ed2279b4aab5f61cd05e6374073d38f46d7f32de8c30e9e3836790600090a4505050565b6000546001600160a01b03163314614154576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006141b28484846153da565b949350505050565b6000546001600160a01b03163314614207576040805162461bcd60e51b815260206004820152601660248201526000805160206156cd833981519152604482015290519081900360640190fd5b6120e7816153f7565b6000806000806000614259336000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611ce192505050565b614296576040805162461bcd60e51b81526020600482015260096024820152684e6f2061636365737360b81b604482015290519081900360640190fd5b61429e61546e565b945094509450945094509091929394565b604080516103e0810191829052600091829190600490601f908285855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116142cc5790505050505050905060005b601f81101561433c5760018282601f811061432557fe5b60200201510361ffff16929092019160010161430e565b506040805160a08101825260025463ffffffff8082168352600160201b82048116602080850191909152600160401b8304821684860152600160601b8304821660608501819052600160801b90930490911660808401526029805485518184028101840190965280865296909202633b9aca00029592936000939092918301828280156143f257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116143d4575b5050604080516103e0810191829052949550600094935060089250601f915082845b815481526020019060010190808311614414575050505050905060005b825181101561445b5760018282601f811061444857fe5b6020020151039590950194600101614431565b505050505090565b600080606083806020019051606081101561447d57600080fd5b81516020830151604080850180519151939592948301929184600160201b8211156144a757600080fd5b9083019060208201858111156144bc57600080fd5b82518660208202830111600160201b821117156144d857600080fd5b82525081516020918201928201910280838360005b838110156145055781810151838201526020016144ed565b505050509190910160405250949993985091965091945050505050565b602a54600160b01b900463ffffffff166000908152602b6020526040902054601790810b900b90565b6001600160a01b03811660009081526027602090815260408083208151808301909252805460ff8082168452929391929184019161010090910416600281111561459157fe5b600281111561459c57fe5b905250905060006145ac836110be565b90508015612808576001600160a01b03808416600090815260066020908152604080832054815163a9059cbb60e01b81529085166004820181905260248201879052915191947f0000000000000000000000000000000000000000000000000000000000000000169363a9059cbb9360448084019491939192918390030190829087803b15801561463c57600080fd5b505af1158015614650573d6000803e3d6000fd5b505050506040513d602081101561466657600080fd5b50516146ae576040805162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015290519081900360640190fd5b60016004846000015160ff16601f81106146c457fe5b601091828204019190066002026101000a81548161ffff021916908361ffff16021790555060016008846000015160ff16601f81106146ff57fe5b0155604080516001600160a01b0380871682528316602082015280820184905290517fe8ec50e5150ae28ae37e493ff389ffab7ffaec2dc4dccfca03f12a3de29d12b29181900360600190a150505050565b60008a8a8a8a8a8a8a8a8a8a604051602001808b6001600160a01b031681526020018a6001600160401b0316815260200180602001806020018760ff168152602001866001600160401b031681526020018060200184810384528c8c82818152602001925060200280828437600083820152601f01601f191690910185810384528a8152602090810191508b908b0280828437600083820152601f01601f191690910185810383528681526020019050868680828437600081840152601f19601f8201169050808301925050509d50505050505050505050505050506040516020818303038152906040528051906020012090509a9950505050505050505050565b602a54600160b01b900463ffffffff1690565b6001600160a01b03821660009081526031602052604081205460ff1680611d0057505060305460ff161592915050565b602f8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015611f715780601f106148f757610100808354040283529160200191611f71565b820191906000526020600020905b81548152906001019060200180831161490557509395945050505050565b60008185101561497a576040805162461bcd60e51b815260206004820181905260248201527f6761734c6566742063616e6e6f742065786365656420696e697469616c476173604482015290519081900360640190fd5b818503830161179301633b9aca00858202026001600160801b03811061499c57fe5b9695505050505050565b602a54600160b01b900463ffffffff166000908152602b6020526040902054600160c01b90046001600160401b031690565b600080600080600063ffffffff866001600160501b031611156040518060400160405280600f81526020016e139bc819185d18481c1c995cd95b9d608a1b81525090614aa25760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614a67578181015183820152602001614a4f565b50505050905090810190601f168015614a945780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5050505063ffffffff83166000908152602b6020908152604091829020825180840190935254601781810b810b810b808552600160c01b9092046001600160401b031693909201839052949594900b939092508291508490565b6000611d008261ffff168461ffff160161ffff61508b565b6001600160a01b03811660009081526031602052604090205460ff166120e7576001600160a01b038116600081815260316020908152604091829020805460ff19166001179055815192835290517f87286ad1f399c8e82bf0c4ef4fcdc570ea2e1e92176e5c848b6413545b885db49281900390910190a150565b600063ffffffff821115614ba5575060006111e8565b5063ffffffff166000908152602b6020526040902054601790810b900b90565b600063ffffffff821115614bdb575060006111e8565b5063ffffffff166000908152602b6020526040902054600160c01b90046001600160401b031690565b6040805160a08101825260025463ffffffff8082168352600160201b820481166020840152600160401b8204811683850152600160601b820481166060840152600160801b90910416608082015281516103e0810192839052909160009190600490601f908285855b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411614c6d575050604080516103e0810191829052959650600095945060089350601f9250905082845b815481526020019060010190808311614cc7575050505050905060006029805480602002602001604051908101604052809291908181526020018280548015614d3957602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311614d1b575b5050505050905060005b8151811015614f8657600060018483601f8110614d5c57fe5b6020020151039050600060018684601f8110614d7457fe5b60200201510361ffff169050600082886060015163ffffffff168302633b9aca00020190506000811115614f7b57600060066000878781518110614db457fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b031690507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb82846040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015614e6957600080fd5b505af1158015614e7d573d6000803e3d6000fd5b505050506040513d6020811015614e9357600080fd5b5051614edb576040805162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b604482015290519081900360640190fd5b60018886601f8110614ee957fe5b61ffff909216602092909202015260018786601f8110614f0557fe5b602002015285517fe8ec50e5150ae28ae37e493ff389ffab7ffaec2dc4dccfca03f12a3de29d12b290879087908110614f3a57fe5b6020026020010151828460405180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060405180910390a1505b505050600101614d43565b50614f94600484601f6155a8565b5061262e600883601f61563e565b6040805160a0808201835263ffffffff88811680845288821660208086018290528984168688018190528985166060808901829052958a1660809889018190526002805463ffffffff1916871767ffffffff000000001916600160201b8702176bffffffff00000000000000001916600160401b85021763ffffffff60601b1916600160601b84021763ffffffff60801b1916600160801b830217905589519586529285019390935283880152928201529283015291517fd0d9486a2c673e2a4b57fc82e4c8a556b3e2b82dd5db07e2c04a920ca0f469b6929181900390910190a15050505050565b60008183101561509c575081611d03565b50919050565b602083810286019082020160e4019695505050505050565b60408051808201909152602d546001600160a01b038116808352600160a01b90910463ffffffff1660208301526150f157506126f6565b600019830163ffffffff8181166000818152602b6020908152604080832054875188840151835163beed9b5160e01b81526004810197909752601792830b90920b602487018190528b88166044880152606487018b9052925192966001600160a01b039091169563beed9b51959290911693608480830194919391928390030190829088803b15801561518357600080fd5b5087f1935050505080156151a957506040513d60208110156151a457600080fd5b505160015b612b275761262e565b3360009081526027602090815260408083208151808301909252805460ff808216845292939192918401916101009091041660028111156151ef57fe5b60028111156151fa57fe5b9052506040805160a08101825260025463ffffffff8082168352600160201b820481166020840152600160401b8204811683850152600160601b820481166060840152600160801b90910416608082015281516103e0810192839052929350916152ae91859190600490601f90826000855b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161526c57905050505050506154c9565b6152bc90600490601f6155a8565b506002826020015160028111156152cf57fe5b14615321576040805162461bcd60e51b815260206004820181905260248201527f73656e7420627920756e64657369676e61746564207472616e736d6974746572604482015290519081900360640190fd5b6000615348633b9aca003a04836020015163ffffffff16846000015163ffffffff166153da565b90506010360260005a905060006153678863ffffffff16858585614923565b6001600160801b031690506000620f4240866040015163ffffffff1683028161538c57fe5b049050856080015163ffffffff16633b9aca0002816008896000015160ff16601f81106153b557fe5b015401016008886000015160ff16601f81106153cd57fe5b0155505050505050505050565b600083838110156153ed57600285850304015b611dd2818461508b565b6003546001600160a01b0390811690821681146126f657600380546001600160a01b0319166001600160a01b03848116918217909255604080519284168352602083019190915280517f793cb73064f3c8cde7e187ae515511e6e56d1ee89bf08b82fa60fb70f8d489129281900390910190a15050565b602a54600160b01b900463ffffffff166000818152602b6020908152604091829020825180840190935254601781810b810b810b808552600160c01b9092046001600160401b031693909201839052929392900b9181908490565b6154d161553e565b60005b83518110156155365760008482815181106154eb57fe5b016020015160f81c90506155108482601f811061550457fe5b60200201516001614afc565b848260ff16601f811061551f57fe5b61ffff9092166020929092020152506001016154d4565b509092915050565b604051806103e00160405280601f906020820280368337509192915050565b6040518060a0016040528061557061566c565b81526060602082018190526040820181905280820152600060809091015290565b604080518082019091526000808252602082015290565b60028301918390821561562e5791602002820160005b838211156155fe57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026155be565b801561562c5782816101000a81549061ffff02191690556002016020816001010492830192600103026155fe565b505b5061563a929150615693565b5090565b82601f810192821561562e579160200282015b8281111561562e578251825591602001919060010190615651565b60408051608081018252600080825260208201819052918101829052606081019190915290565b5b8082111561563a576000815560010161569456fe6f7261636c6520616464726573736573206f7574206f6620726567697374726174696f6e4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000416363657373436f6e74726f6c6c65644f6666636861696e41676772656761746f7220322e302e30a26469706673582212208f7aa940a66246e99e6d9ddce9ac9a144a0c95c53ade396042caccdc47cce50b64736f6c63430007060033";

    public static final String FUNC_LINK = "LINK";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_ACCEPTPAYEESHIP = "acceptPayeeship";

    public static final String FUNC_ADDACCESS = "addAccess";

    public static final String FUNC_BILLINGACCESSCONTROLLER = "billingAccessController";

    public static final String FUNC_BILLINGDATA = "billingData";

    public static final String FUNC_CHECKENABLED = "checkEnabled";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DESCRIPTION = "description";

    public static final String FUNC_DISABLEACCESSCHECK = "disableAccessCheck";

    public static final String FUNC_ENABLEACCESSCHECK = "enableAccessCheck";

    public static final String FUNC_GETANSWER = "getAnswer";

    public static final String FUNC_GETBILLING = "getBilling";

    public static final String FUNC_GETCONFIGDIGEST = "getConfigDigest";

    public static final String FUNC_GETROUNDDATA = "getRoundData";

    public static final String FUNC_GETTIMESTAMP = "getTimestamp";

    public static final String FUNC_HASACCESS = "hasAccess";

    public static final String FUNC_LATESTANSWER = "latestAnswer";

    public static final String FUNC_LATESTCONFIGDETAILS = "latestConfigDetails";

    public static final String FUNC_LATESTROUND = "latestRound";

    public static final String FUNC_LATESTROUNDDATA = "latestRoundData";

    public static final String FUNC_LATESTTIMESTAMP = "latestTimestamp";

    public static final String FUNC_LATESTTRANSMISSIONDETAILS = "latestTransmissionDetails";

    public static final String FUNC_LINKAVAILABLEFORPAYMENT = "linkAvailableForPayment";

    public static final String FUNC_MAXANSWER = "maxAnswer";

    public static final String FUNC_MINANSWER = "minAnswer";

    public static final String FUNC_ORACLEOBSERVATIONCOUNT = "oracleObservationCount";

    public static final String FUNC_OWEDPAYMENT = "owedPayment";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REMOVEACCESS = "removeAccess";

    public static final String FUNC_REQUESTNEWROUND = "requestNewRound";

    public static final String FUNC_REQUESTERACCESSCONTROLLER = "requesterAccessController";

    public static final String FUNC_SETBILLING = "setBilling";

    public static final String FUNC_SETBILLINGACCESSCONTROLLER = "setBillingAccessController";

    public static final String FUNC_SETCONFIG = "setConfig";

    public static final String FUNC_SETPAYEES = "setPayees";

    public static final String FUNC_SETREQUESTERACCESSCONTROLLER = "setRequesterAccessController";

    public static final String FUNC_SETVALIDATORCONFIG = "setValidatorConfig";

    public static final String FUNC_TESTACCOUNTINGGASCOST = "testAccountingGasCost";

    public static final String FUNC_TESTBURNLINK = "testBurnLINK";

    public static final String FUNC_TESTDECODEREPORT = "testDecodeReport";

    public static final String FUNC_TESTIMPLIEDGASPRICE = "testImpliedGasPrice";

    public static final String FUNC_TESTPAYEE = "testPayee";

    public static final String FUNC_TESTSATURATINGADDUINT16 = "testSaturatingAddUint16";

    public static final String FUNC_TESTSETGASREIMBURSEMENTS = "testSetGasReimbursements";

    public static final String FUNC_TESTSETORACLEOBSERVATIONCOUNT = "testSetOracleObservationCount";

    public static final String FUNC_TESTTOTALLINKDUE = "testTotalLinkDue";

    public static final String FUNC_TESTTRANSMITTERGASCOSTETHWEI = "testTransmitterGasCostEthWei";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERPAYEESHIP = "transferPayeeship";

    public static final String FUNC_TRANSMIT = "transmit";

    public static final String FUNC_TRANSMITTERS = "transmitters";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_VALIDATORCONFIG = "validatorConfig";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_WITHDRAWFUNDS = "withdrawFunds";

    public static final String FUNC_WITHDRAWPAYMENT = "withdrawPayment";

    public static final Event ADDEDACCESS_EVENT = new Event("AddedAccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ANSWERUPDATED_EVENT = new Event("AnswerUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BILLINGACCESSCONTROLLERSET_EVENT = new Event("BillingAccessControllerSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BILLINGSET_EVENT = new Event("BillingSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
    ;

    public static final Event CHECKACCESSDISABLED_EVENT = new Event("CheckAccessDisabled", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event CHECKACCESSENABLED_EVENT = new Event("CheckAccessEnabled", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event CONFIGSET_EVENT = new Event("ConfigSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint64>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint64>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NEWROUND_EVENT = new Event("NewRound", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWTRANSMISSION_EVENT = new Event("NewTransmission", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>(true) {}, new TypeReference<Int192>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Int192>>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ORACLEPAID_EVENT = new Event("OraclePaid", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event("OwnershipTransferRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAYEESHIPTRANSFERREQUESTED_EVENT = new Event("PayeeshipTransferRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAYEESHIPTRANSFERRED_EVENT = new Event("PayeeshipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REMOVEDACCESS_EVENT = new Event("RemovedAccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTERACCESSCONTROLLERSET_EVENT = new Event("RequesterAccessControllerSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ROUNDREQUESTED_EVENT = new Event("RoundRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes16>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event VALIDATORCONFIGSET_EVENT = new Event("ValidatorConfigSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint32>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint32>() {}));
    ;

    @Deprecated
    protected TestOffchainAggregator(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TestOffchainAggregator(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TestOffchainAggregator(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TestOffchainAggregator(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddedAccessEventResponse> getAddedAccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDEDACCESS_EVENT, transactionReceipt);
        ArrayList<AddedAccessEventResponse> responses = new ArrayList<AddedAccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddedAccessEventResponse typedResponse = new AddedAccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddedAccessEventResponse> addedAccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddedAccessEventResponse>() {
            @Override
            public AddedAccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDEDACCESS_EVENT, log);
                AddedAccessEventResponse typedResponse = new AddedAccessEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddedAccessEventResponse> addedAccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDEDACCESS_EVENT));
        return addedAccessEventFlowable(filter);
    }

    public List<AnswerUpdatedEventResponse> getAnswerUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ANSWERUPDATED_EVENT, transactionReceipt);
        ArrayList<AnswerUpdatedEventResponse> responses = new ArrayList<AnswerUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnswerUpdatedEventResponse typedResponse = new AnswerUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.current = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AnswerUpdatedEventResponse> answerUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AnswerUpdatedEventResponse>() {
            @Override
            public AnswerUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ANSWERUPDATED_EVENT, log);
                AnswerUpdatedEventResponse typedResponse = new AnswerUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.current = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AnswerUpdatedEventResponse> answerUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANSWERUPDATED_EVENT));
        return answerUpdatedEventFlowable(filter);
    }

    public List<BillingAccessControllerSetEventResponse> getBillingAccessControllerSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BILLINGACCESSCONTROLLERSET_EVENT, transactionReceipt);
        ArrayList<BillingAccessControllerSetEventResponse> responses = new ArrayList<BillingAccessControllerSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BillingAccessControllerSetEventResponse typedResponse = new BillingAccessControllerSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BillingAccessControllerSetEventResponse> billingAccessControllerSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BillingAccessControllerSetEventResponse>() {
            @Override
            public BillingAccessControllerSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BILLINGACCESSCONTROLLERSET_EVENT, log);
                BillingAccessControllerSetEventResponse typedResponse = new BillingAccessControllerSetEventResponse();
                typedResponse.log = log;
                typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BillingAccessControllerSetEventResponse> billingAccessControllerSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BILLINGACCESSCONTROLLERSET_EVENT));
        return billingAccessControllerSetEventFlowable(filter);
    }

    public List<BillingSetEventResponse> getBillingSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BILLINGSET_EVENT, transactionReceipt);
        ArrayList<BillingSetEventResponse> responses = new ArrayList<BillingSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BillingSetEventResponse typedResponse = new BillingSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.maximumGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reasonableGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.microLinkPerEth = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.linkGweiPerObservation = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.linkGweiPerTransmission = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BillingSetEventResponse> billingSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BillingSetEventResponse>() {
            @Override
            public BillingSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BILLINGSET_EVENT, log);
                BillingSetEventResponse typedResponse = new BillingSetEventResponse();
                typedResponse.log = log;
                typedResponse.maximumGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.reasonableGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.microLinkPerEth = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.linkGweiPerObservation = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.linkGweiPerTransmission = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BillingSetEventResponse> billingSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BILLINGSET_EVENT));
        return billingSetEventFlowable(filter);
    }

    public List<CheckAccessDisabledEventResponse> getCheckAccessDisabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHECKACCESSDISABLED_EVENT, transactionReceipt);
        ArrayList<CheckAccessDisabledEventResponse> responses = new ArrayList<CheckAccessDisabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CheckAccessDisabledEventResponse typedResponse = new CheckAccessDisabledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CheckAccessDisabledEventResponse> checkAccessDisabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CheckAccessDisabledEventResponse>() {
            @Override
            public CheckAccessDisabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHECKACCESSDISABLED_EVENT, log);
                CheckAccessDisabledEventResponse typedResponse = new CheckAccessDisabledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<CheckAccessDisabledEventResponse> checkAccessDisabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHECKACCESSDISABLED_EVENT));
        return checkAccessDisabledEventFlowable(filter);
    }

    public List<CheckAccessEnabledEventResponse> getCheckAccessEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHECKACCESSENABLED_EVENT, transactionReceipt);
        ArrayList<CheckAccessEnabledEventResponse> responses = new ArrayList<CheckAccessEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CheckAccessEnabledEventResponse typedResponse = new CheckAccessEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CheckAccessEnabledEventResponse> checkAccessEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CheckAccessEnabledEventResponse>() {
            @Override
            public CheckAccessEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHECKACCESSENABLED_EVENT, log);
                CheckAccessEnabledEventResponse typedResponse = new CheckAccessEnabledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<CheckAccessEnabledEventResponse> checkAccessEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHECKACCESSENABLED_EVENT));
        return checkAccessEnabledEventFlowable(filter);
    }

    public List<ConfigSetEventResponse> getConfigSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONFIGSET_EVENT, transactionReceipt);
        ArrayList<ConfigSetEventResponse> responses = new ArrayList<ConfigSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConfigSetEventResponse typedResponse = new ConfigSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousConfigBlockNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.configCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.signers = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.transmitters = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.encodedConfigVersion = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.encoded = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConfigSetEventResponse> configSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ConfigSetEventResponse>() {
            @Override
            public ConfigSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONFIGSET_EVENT, log);
                ConfigSetEventResponse typedResponse = new ConfigSetEventResponse();
                typedResponse.log = log;
                typedResponse.previousConfigBlockNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.configCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.signers = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.transmitters = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.encodedConfigVersion = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.encoded = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConfigSetEventResponse> configSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONFIGSET_EVENT));
        return configSetEventFlowable(filter);
    }

    public List<NewRoundEventResponse> getNewRoundEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWROUND_EVENT, transactionReceipt);
        ArrayList<NewRoundEventResponse> responses = new ArrayList<NewRoundEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewRoundEventResponse typedResponse = new NewRoundEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.startedBy = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.startedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewRoundEventResponse> newRoundEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewRoundEventResponse>() {
            @Override
            public NewRoundEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWROUND_EVENT, log);
                NewRoundEventResponse typedResponse = new NewRoundEventResponse();
                typedResponse.log = log;
                typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.startedBy = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.startedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewRoundEventResponse> newRoundEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWROUND_EVENT));
        return newRoundEventFlowable(filter);
    }

    public List<NewTransmissionEventResponse> getNewTransmissionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTRANSMISSION_EVENT, transactionReceipt);
        ArrayList<NewTransmissionEventResponse> responses = new ArrayList<NewTransmissionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTransmissionEventResponse typedResponse = new NewTransmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.aggregatorRoundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.observations = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.observers = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.rawReportContext = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewTransmissionEventResponse> newTransmissionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewTransmissionEventResponse>() {
            @Override
            public NewTransmissionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWTRANSMISSION_EVENT, log);
                NewTransmissionEventResponse typedResponse = new NewTransmissionEventResponse();
                typedResponse.log = log;
                typedResponse.aggregatorRoundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.observations = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.observers = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.rawReportContext = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewTransmissionEventResponse> newTransmissionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWTRANSMISSION_EVENT));
        return newTransmissionEventFlowable(filter);
    }

    public List<OraclePaidEventResponse> getOraclePaidEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORACLEPAID_EVENT, transactionReceipt);
        ArrayList<OraclePaidEventResponse> responses = new ArrayList<OraclePaidEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OraclePaidEventResponse typedResponse = new OraclePaidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.payee = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OraclePaidEventResponse> oraclePaidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OraclePaidEventResponse>() {
            @Override
            public OraclePaidEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORACLEPAID_EVENT, log);
                OraclePaidEventResponse typedResponse = new OraclePaidEventResponse();
                typedResponse.log = log;
                typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.payee = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OraclePaidEventResponse> oraclePaidEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORACLEPAID_EVENT));
        return oraclePaidEventFlowable(filter);
    }

    public List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferRequestedEventResponse>() {
            @Override
            public OwnershipTransferRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
                OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PayeeshipTransferRequestedEventResponse> getPayeeshipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYEESHIPTRANSFERREQUESTED_EVENT, transactionReceipt);
        ArrayList<PayeeshipTransferRequestedEventResponse> responses = new ArrayList<PayeeshipTransferRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayeeshipTransferRequestedEventResponse typedResponse = new PayeeshipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.proposed = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PayeeshipTransferRequestedEventResponse> payeeshipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PayeeshipTransferRequestedEventResponse>() {
            @Override
            public PayeeshipTransferRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYEESHIPTRANSFERREQUESTED_EVENT, log);
                PayeeshipTransferRequestedEventResponse typedResponse = new PayeeshipTransferRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.proposed = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PayeeshipTransferRequestedEventResponse> payeeshipTransferRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYEESHIPTRANSFERREQUESTED_EVENT));
        return payeeshipTransferRequestedEventFlowable(filter);
    }

    public List<PayeeshipTransferredEventResponse> getPayeeshipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYEESHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<PayeeshipTransferredEventResponse> responses = new ArrayList<PayeeshipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayeeshipTransferredEventResponse typedResponse = new PayeeshipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previous = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.current = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PayeeshipTransferredEventResponse> payeeshipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PayeeshipTransferredEventResponse>() {
            @Override
            public PayeeshipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYEESHIPTRANSFERRED_EVENT, log);
                PayeeshipTransferredEventResponse typedResponse = new PayeeshipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previous = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.current = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PayeeshipTransferredEventResponse> payeeshipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYEESHIPTRANSFERRED_EVENT));
        return payeeshipTransferredEventFlowable(filter);
    }

    public List<RemovedAccessEventResponse> getRemovedAccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEDACCESS_EVENT, transactionReceipt);
        ArrayList<RemovedAccessEventResponse> responses = new ArrayList<RemovedAccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemovedAccessEventResponse typedResponse = new RemovedAccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RemovedAccessEventResponse> removedAccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RemovedAccessEventResponse>() {
            @Override
            public RemovedAccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REMOVEDACCESS_EVENT, log);
                RemovedAccessEventResponse typedResponse = new RemovedAccessEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RemovedAccessEventResponse> removedAccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVEDACCESS_EVENT));
        return removedAccessEventFlowable(filter);
    }

    public List<RequesterAccessControllerSetEventResponse> getRequesterAccessControllerSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTERACCESSCONTROLLERSET_EVENT, transactionReceipt);
        ArrayList<RequesterAccessControllerSetEventResponse> responses = new ArrayList<RequesterAccessControllerSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequesterAccessControllerSetEventResponse typedResponse = new RequesterAccessControllerSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequesterAccessControllerSetEventResponse> requesterAccessControllerSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RequesterAccessControllerSetEventResponse>() {
            @Override
            public RequesterAccessControllerSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTERACCESSCONTROLLERSET_EVENT, log);
                RequesterAccessControllerSetEventResponse typedResponse = new RequesterAccessControllerSetEventResponse();
                typedResponse.log = log;
                typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequesterAccessControllerSetEventResponse> requesterAccessControllerSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTERACCESSCONTROLLERSET_EVENT));
        return requesterAccessControllerSetEventFlowable(filter);
    }

    public List<RoundRequestedEventResponse> getRoundRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROUNDREQUESTED_EVENT, transactionReceipt);
        ArrayList<RoundRequestedEventResponse> responses = new ArrayList<RoundRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoundRequestedEventResponse typedResponse = new RoundRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.configDigest = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.epoch = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.round = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoundRequestedEventResponse> roundRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoundRequestedEventResponse>() {
            @Override
            public RoundRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROUNDREQUESTED_EVENT, log);
                RoundRequestedEventResponse typedResponse = new RoundRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.configDigest = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.epoch = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.round = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoundRequestedEventResponse> roundRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROUNDREQUESTED_EVENT));
        return roundRequestedEventFlowable(filter);
    }

    public List<ValidatorConfigSetEventResponse> getValidatorConfigSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VALIDATORCONFIGSET_EVENT, transactionReceipt);
        ArrayList<ValidatorConfigSetEventResponse> responses = new ArrayList<ValidatorConfigSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ValidatorConfigSetEventResponse typedResponse = new ValidatorConfigSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValidator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.currentValidator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.previousGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currentGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ValidatorConfigSetEventResponse> validatorConfigSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ValidatorConfigSetEventResponse>() {
            @Override
            public ValidatorConfigSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VALIDATORCONFIGSET_EVENT, log);
                ValidatorConfigSetEventResponse typedResponse = new ValidatorConfigSetEventResponse();
                typedResponse.log = log;
                typedResponse.previousValidator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.currentValidator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.previousGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.currentGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ValidatorConfigSetEventResponse> validatorConfigSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALIDATORCONFIGSET_EVENT));
        return validatorConfigSetEventFlowable(filter);
    }

    public RemoteFunctionCall<String> LINK() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptPayeeship(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPTPAYEESHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccess(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> billingAccessController() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BILLINGACCESSCONTROLLER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple7<List<BigInteger>, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> billingData() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BILLINGDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray31<Uint16>>() {}, new TypeReference<StaticArray31<Uint256>>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple7<List<BigInteger>, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<List<BigInteger>, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<List<BigInteger>, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<List<BigInteger>, List<BigInteger>, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                convertToNative((List<Uint16>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> checkEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> description() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESCRIPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> disableAccessCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DISABLEACCESSCHECK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> enableAccessCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENABLEACCESSCHECK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getAnswer(BigInteger _roundId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETANSWER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_roundId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getBilling() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBILLING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getConfigDigest() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCONFIGDIGEST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getRoundData(BigInteger _roundId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROUNDDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(_roundId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint80>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTimestamp(BigInteger _roundId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTIMESTAMP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_roundId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasAccess(String _user, byte[] _calldata) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASACCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.DynamicBytes(_calldata)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> latestAnswer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, byte[]>> latestConfigDetails() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTCONFIGDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes16>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, byte[]>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, byte[]>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> latestRound() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTROUND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> latestRoundData() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTROUNDDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint80>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> latestTimestamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTTIMESTAMP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>> latestTransmissionDetails() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTTRANSMISSIONDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int192>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> linkAvailableForPayment() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINKAVAILABLEFORPAYMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> maxAnswer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int192>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minAnswer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int192>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> oracleObservationCount(String _signerOrTransmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ORACLEOBSERVATIONCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _signerOrTransmitter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> owedPayment(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWEDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeAccess(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEACCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestNewRound() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REQUESTNEWROUND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> requesterAccessController() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REQUESTERACCESSCONTROLLER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setBilling(BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBILLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBillingAccessController(String _billingAccessController) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBILLINGACCESSCONTROLLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _billingAccessController)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setConfig(List<String> _signers, List<String> _transmitters, BigInteger _threshold, BigInteger _encodedConfigVersion, byte[] _encoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCONFIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_signers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_transmitters, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint8(_threshold), 
                new org.web3j.abi.datatypes.generated.Uint64(_encodedConfigVersion), 
                new org.web3j.abi.datatypes.DynamicBytes(_encoded)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPayees(List<String> _transmitters, List<String> _payees) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPAYEES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_transmitters, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_payees, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRequesterAccessController(String _requesterAccessController) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREQUESTERACCESSCONTROLLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _requesterAccessController)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setValidatorConfig(String _newValidator, BigInteger _newGasLimit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVALIDATORCONFIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newValidator), 
                new org.web3j.abi.datatypes.generated.Uint32(_newGasLimit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> testAccountingGasCost() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTACCOUNTINGGASCOST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> testBurnLINK(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TESTBURNLINK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<byte[], byte[], List<BigInteger>>> testDecodeReport(byte[] report) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTDECODEREPORT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(report)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<DynamicArray<Int192>>() {}));
        return new RemoteFunctionCall<Tuple3<byte[], byte[], List<BigInteger>>>(function,
                new Callable<Tuple3<byte[], byte[], List<BigInteger>>>() {
                    @Override
                    public Tuple3<byte[], byte[], List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<byte[], byte[], List<BigInteger>>(
                                (byte[]) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue(), 
                                convertToNative((List<Int192>) results.get(2).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> testImpliedGasPrice(BigInteger txGasPrice, BigInteger reasonableGasPrice, BigInteger maximumGasPrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTIMPLIEDGASPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(txGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(maximumGasPrice)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> testPayee(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTPAYEE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> testSaturatingAddUint16(BigInteger _x, BigInteger _y) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTSATURATINGADDUINT16, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(_x), 
                new org.web3j.abi.datatypes.generated.Uint16(_y)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> testSetGasReimbursements(String _transmitterOrSigner, BigInteger _amountLinkWei) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TESTSETGASREIMBURSEMENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitterOrSigner), 
                new org.web3j.abi.datatypes.generated.Uint256(_amountLinkWei)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> testSetOracleObservationCount(String _oracle, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TESTSETORACLEOBSERVATIONCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _oracle), 
                new org.web3j.abi.datatypes.generated.Uint16(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> testTotalLinkDue() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTTOTALLINKDUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> testTransmitterGasCostEthWei(BigInteger initialGas, BigInteger gasPrice, BigInteger callDataCost, BigInteger gasLeft) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TESTTRANSMITTERGASCOSTETHWEI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(initialGas), 
                new org.web3j.abi.datatypes.generated.Uint256(gasPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(callDataCost), 
                new org.web3j.abi.datatypes.generated.Uint256(gasLeft)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String _to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferPayeeship(String _transmitter, String _proposed) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERPAYEESHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter), 
                new org.web3j.abi.datatypes.Address(160, _proposed)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transmit(byte[] _report, List<byte[]> _rs, List<byte[]> _ss, byte[] _rawVs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_report), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_rs, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_ss, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_rawVs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> transmitters() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRANSMITTERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEANDVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> validatorConfig() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATORCONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawFunds(String _recipient, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawPayment(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TestOffchainAggregator load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestOffchainAggregator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TestOffchainAggregator load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TestOffchainAggregator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TestOffchainAggregator load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TestOffchainAggregator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TestOffchainAggregator load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TestOffchainAggregator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TestOffchainAggregator> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAdminAccessController) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAdminAccessController)));
        return deployRemoteCall(TestOffchainAggregator.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<TestOffchainAggregator> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAdminAccessController) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAdminAccessController)));
        return deployRemoteCall(TestOffchainAggregator.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TestOffchainAggregator> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAdminAccessController) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAdminAccessController)));
        return deployRemoteCall(TestOffchainAggregator.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TestOffchainAggregator> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAdminAccessController) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAdminAccessController)));
        return deployRemoteCall(TestOffchainAggregator.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class AddedAccessEventResponse extends BaseEventResponse {
        public String user;
    }

    public static class AnswerUpdatedEventResponse extends BaseEventResponse {
        public BigInteger current;

        public BigInteger roundId;

        public BigInteger updatedAt;
    }

    public static class BillingAccessControllerSetEventResponse extends BaseEventResponse {
        public String old;

        public String current;
    }

    public static class BillingSetEventResponse extends BaseEventResponse {
        public BigInteger maximumGasPrice;

        public BigInteger reasonableGasPrice;

        public BigInteger microLinkPerEth;

        public BigInteger linkGweiPerObservation;

        public BigInteger linkGweiPerTransmission;
    }

    public static class CheckAccessDisabledEventResponse extends BaseEventResponse {
    }

    public static class CheckAccessEnabledEventResponse extends BaseEventResponse {
    }

    public static class ConfigSetEventResponse extends BaseEventResponse {
        public BigInteger previousConfigBlockNumber;

        public BigInteger configCount;

        public List<String> signers;

        public List<String> transmitters;

        public BigInteger threshold;

        public BigInteger encodedConfigVersion;

        public byte[] encoded;
    }

    public static class NewRoundEventResponse extends BaseEventResponse {
        public BigInteger roundId;

        public String startedBy;

        public BigInteger startedAt;
    }

    public static class NewTransmissionEventResponse extends BaseEventResponse {
        public BigInteger aggregatorRoundId;

        public BigInteger answer;

        public String transmitter;

        public List<BigInteger> observations;

        public byte[] observers;

        public byte[] rawReportContext;
    }

    public static class OraclePaidEventResponse extends BaseEventResponse {
        public String transmitter;

        public String payee;

        public BigInteger amount;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class PayeeshipTransferRequestedEventResponse extends BaseEventResponse {
        public String transmitter;

        public String current;

        public String proposed;
    }

    public static class PayeeshipTransferredEventResponse extends BaseEventResponse {
        public String transmitter;

        public String previous;

        public String current;
    }

    public static class RemovedAccessEventResponse extends BaseEventResponse {
        public String user;
    }

    public static class RequesterAccessControllerSetEventResponse extends BaseEventResponse {
        public String old;

        public String current;
    }

    public static class RoundRequestedEventResponse extends BaseEventResponse {
        public String requester;

        public byte[] configDigest;

        public BigInteger epoch;

        public BigInteger round;
    }

    public static class ValidatorConfigSetEventResponse extends BaseEventResponse {
        public String previousValidator;

        public String currentValidator;

        public BigInteger previousGasLimit;

        public BigInteger currentGasLimit;
    }
}
