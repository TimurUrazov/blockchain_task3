package org.web3j.model;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes16;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int192;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.abi.datatypes.generated.Uint80;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7.
 */
@SuppressWarnings("rawtypes")
public class AccessControlledOffchainAggregator extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_LINK = "LINK";

    public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

    public static final String FUNC_ACCEPTPAYEESHIP = "acceptPayeeship";

    public static final String FUNC_ADDACCESS = "addAccess";

    public static final String FUNC_BILLINGACCESSCONTROLLER = "billingAccessController";

    public static final String FUNC_CHECKENABLED = "checkEnabled";

    public static final String FUNC_DECIMALS = "decimals";

    public static final String FUNC_DESCRIPTION = "description";

    public static final String FUNC_DISABLEACCESSCHECK = "disableAccessCheck";

    public static final String FUNC_ENABLEACCESSCHECK = "enableAccessCheck";

    public static final String FUNC_GETANSWER = "getAnswer";

    public static final String FUNC_GETBILLING = "getBilling";

    public static final String FUNC_GETROUNDDATA = "getRoundData";

    public static final String FUNC_GETTIMESTAMP = "getTimestamp";

    public static final String FUNC_HASACCESS = "hasAccess";

    public static final String FUNC_LATESTANSWER = "latestAnswer";

    public static final String FUNC_LATESTCONFIGDETAILS = "latestConfigDetails";

    public static final String FUNC_LATESTROUND = "latestRound";

    public static final String FUNC_LATESTROUNDDATA = "latestRoundData";

    public static final String FUNC_LATESTTIMESTAMP = "latestTimestamp";

    public static final String FUNC_LATESTTRANSMISSIONDETAILS = "latestTransmissionDetails";

    public static final String FUNC_LINKAVAILABLEFORPAYMENT = "linkAvailableForPayment";

    public static final String FUNC_MAXANSWER = "maxAnswer";

    public static final String FUNC_MINANSWER = "minAnswer";

    public static final String FUNC_ORACLEOBSERVATIONCOUNT = "oracleObservationCount";

    public static final String FUNC_OWEDPAYMENT = "owedPayment";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REMOVEACCESS = "removeAccess";

    public static final String FUNC_REQUESTNEWROUND = "requestNewRound";

    public static final String FUNC_REQUESTERACCESSCONTROLLER = "requesterAccessController";

    public static final String FUNC_SETBILLING = "setBilling";

    public static final String FUNC_SETBILLINGACCESSCONTROLLER = "setBillingAccessController";

    public static final String FUNC_SETCONFIG = "setConfig";

    public static final String FUNC_SETPAYEES = "setPayees";

    public static final String FUNC_SETREQUESTERACCESSCONTROLLER = "setRequesterAccessController";

    public static final String FUNC_SETVALIDATORCONFIG = "setValidatorConfig";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFERPAYEESHIP = "transferPayeeship";

    public static final String FUNC_TRANSMIT = "transmit";

    public static final String FUNC_TRANSMITTERS = "transmitters";

    public static final String FUNC_TYPEANDVERSION = "typeAndVersion";

    public static final String FUNC_VALIDATORCONFIG = "validatorConfig";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_WITHDRAWFUNDS = "withdrawFunds";

    public static final String FUNC_WITHDRAWPAYMENT = "withdrawPayment";

    public static final Event ADDEDACCESS_EVENT = new Event("AddedAccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event ANSWERUPDATED_EVENT = new Event("AnswerUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BILLINGACCESSCONTROLLERSET_EVENT = new Event("BillingAccessControllerSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event BILLINGSET_EVENT = new Event("BillingSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
    ;

    public static final Event CHECKACCESSDISABLED_EVENT = new Event("CheckAccessDisabled", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event CHECKACCESSENABLED_EVENT = new Event("CheckAccessEnabled", 
            Arrays.<TypeReference<?>>asList());
    ;

    public static final Event CONFIGSET_EVENT = new Event("ConfigSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint64>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint64>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event NEWROUND_EVENT = new Event("NewRound", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWTRANSMISSION_EVENT = new Event("NewTransmission", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>(true) {}, new TypeReference<Int192>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicArray<Int192>>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event ORACLEPAID_EVENT = new Event("OraclePaid", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERREQUESTED_EVENT = new Event("OwnershipTransferRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAYEESHIPTRANSFERREQUESTED_EVENT = new Event("PayeeshipTransferRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event PAYEESHIPTRANSFERRED_EVENT = new Event("PayeeshipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REMOVEDACCESS_EVENT = new Event("RemovedAccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event REQUESTERACCESSCONTROLLERSET_EVENT = new Event("RequesterAccessControllerSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event ROUNDREQUESTED_EVENT = new Event("RoundRequested", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes16>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event VALIDATORCONFIGSET_EVENT = new Event("ValidatorConfigSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint32>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint32>() {}));
    ;

    @Deprecated
    protected AccessControlledOffchainAggregator(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected AccessControlledOffchainAggregator(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected AccessControlledOffchainAggregator(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected AccessControlledOffchainAggregator(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddedAccessEventResponse> getAddedAccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDEDACCESS_EVENT, transactionReceipt);
        ArrayList<AddedAccessEventResponse> responses = new ArrayList<AddedAccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddedAccessEventResponse typedResponse = new AddedAccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddedAccessEventResponse> addedAccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddedAccessEventResponse>() {
            @Override
            public AddedAccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDEDACCESS_EVENT, log);
                AddedAccessEventResponse typedResponse = new AddedAccessEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddedAccessEventResponse> addedAccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDEDACCESS_EVENT));
        return addedAccessEventFlowable(filter);
    }

    public List<AnswerUpdatedEventResponse> getAnswerUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ANSWERUPDATED_EVENT, transactionReceipt);
        ArrayList<AnswerUpdatedEventResponse> responses = new ArrayList<AnswerUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AnswerUpdatedEventResponse typedResponse = new AnswerUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.current = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AnswerUpdatedEventResponse> answerUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AnswerUpdatedEventResponse>() {
            @Override
            public AnswerUpdatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ANSWERUPDATED_EVENT, log);
                AnswerUpdatedEventResponse typedResponse = new AnswerUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.current = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.updatedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AnswerUpdatedEventResponse> answerUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ANSWERUPDATED_EVENT));
        return answerUpdatedEventFlowable(filter);
    }

    public List<BillingAccessControllerSetEventResponse> getBillingAccessControllerSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BILLINGACCESSCONTROLLERSET_EVENT, transactionReceipt);
        ArrayList<BillingAccessControllerSetEventResponse> responses = new ArrayList<BillingAccessControllerSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BillingAccessControllerSetEventResponse typedResponse = new BillingAccessControllerSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BillingAccessControllerSetEventResponse> billingAccessControllerSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BillingAccessControllerSetEventResponse>() {
            @Override
            public BillingAccessControllerSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BILLINGACCESSCONTROLLERSET_EVENT, log);
                BillingAccessControllerSetEventResponse typedResponse = new BillingAccessControllerSetEventResponse();
                typedResponse.log = log;
                typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BillingAccessControllerSetEventResponse> billingAccessControllerSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BILLINGACCESSCONTROLLERSET_EVENT));
        return billingAccessControllerSetEventFlowable(filter);
    }

    public List<BillingSetEventResponse> getBillingSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BILLINGSET_EVENT, transactionReceipt);
        ArrayList<BillingSetEventResponse> responses = new ArrayList<BillingSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BillingSetEventResponse typedResponse = new BillingSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.maximumGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.reasonableGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.microLinkPerEth = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.linkGweiPerObservation = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.linkGweiPerTransmission = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BillingSetEventResponse> billingSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BillingSetEventResponse>() {
            @Override
            public BillingSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BILLINGSET_EVENT, log);
                BillingSetEventResponse typedResponse = new BillingSetEventResponse();
                typedResponse.log = log;
                typedResponse.maximumGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.reasonableGasPrice = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.microLinkPerEth = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.linkGweiPerObservation = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.linkGweiPerTransmission = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BillingSetEventResponse> billingSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BILLINGSET_EVENT));
        return billingSetEventFlowable(filter);
    }

    public List<CheckAccessDisabledEventResponse> getCheckAccessDisabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHECKACCESSDISABLED_EVENT, transactionReceipt);
        ArrayList<CheckAccessDisabledEventResponse> responses = new ArrayList<CheckAccessDisabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CheckAccessDisabledEventResponse typedResponse = new CheckAccessDisabledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CheckAccessDisabledEventResponse> checkAccessDisabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CheckAccessDisabledEventResponse>() {
            @Override
            public CheckAccessDisabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHECKACCESSDISABLED_EVENT, log);
                CheckAccessDisabledEventResponse typedResponse = new CheckAccessDisabledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<CheckAccessDisabledEventResponse> checkAccessDisabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHECKACCESSDISABLED_EVENT));
        return checkAccessDisabledEventFlowable(filter);
    }

    public List<CheckAccessEnabledEventResponse> getCheckAccessEnabledEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHECKACCESSENABLED_EVENT, transactionReceipt);
        ArrayList<CheckAccessEnabledEventResponse> responses = new ArrayList<CheckAccessEnabledEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CheckAccessEnabledEventResponse typedResponse = new CheckAccessEnabledEventResponse();
            typedResponse.log = eventValues.getLog();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CheckAccessEnabledEventResponse> checkAccessEnabledEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CheckAccessEnabledEventResponse>() {
            @Override
            public CheckAccessEnabledEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHECKACCESSENABLED_EVENT, log);
                CheckAccessEnabledEventResponse typedResponse = new CheckAccessEnabledEventResponse();
                typedResponse.log = log;
                return typedResponse;
            }
        });
    }

    public Flowable<CheckAccessEnabledEventResponse> checkAccessEnabledEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHECKACCESSENABLED_EVENT));
        return checkAccessEnabledEventFlowable(filter);
    }

    public List<ConfigSetEventResponse> getConfigSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CONFIGSET_EVENT, transactionReceipt);
        ArrayList<ConfigSetEventResponse> responses = new ArrayList<ConfigSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ConfigSetEventResponse typedResponse = new ConfigSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousConfigBlockNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.configCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.signers = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.transmitters = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.encodedConfigVersion = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.encoded = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ConfigSetEventResponse> configSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ConfigSetEventResponse>() {
            @Override
            public ConfigSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CONFIGSET_EVENT, log);
                ConfigSetEventResponse typedResponse = new ConfigSetEventResponse();
                typedResponse.log = log;
                typedResponse.previousConfigBlockNumber = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.configCount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.signers = (List<String>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.transmitters = (List<String>) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.encodedConfigVersion = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                typedResponse.encoded = (byte[]) eventValues.getNonIndexedValues().get(6).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ConfigSetEventResponse> configSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CONFIGSET_EVENT));
        return configSetEventFlowable(filter);
    }

    public List<NewRoundEventResponse> getNewRoundEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWROUND_EVENT, transactionReceipt);
        ArrayList<NewRoundEventResponse> responses = new ArrayList<NewRoundEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewRoundEventResponse typedResponse = new NewRoundEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.startedBy = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.startedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewRoundEventResponse> newRoundEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewRoundEventResponse>() {
            @Override
            public NewRoundEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWROUND_EVENT, log);
                NewRoundEventResponse typedResponse = new NewRoundEventResponse();
                typedResponse.log = log;
                typedResponse.roundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.startedBy = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.startedAt = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewRoundEventResponse> newRoundEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWROUND_EVENT));
        return newRoundEventFlowable(filter);
    }

    public List<NewTransmissionEventResponse> getNewTransmissionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWTRANSMISSION_EVENT, transactionReceipt);
        ArrayList<NewTransmissionEventResponse> responses = new ArrayList<NewTransmissionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewTransmissionEventResponse typedResponse = new NewTransmissionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.aggregatorRoundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.observations = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.observers = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.rawReportContext = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewTransmissionEventResponse> newTransmissionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewTransmissionEventResponse>() {
            @Override
            public NewTransmissionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWTRANSMISSION_EVENT, log);
                NewTransmissionEventResponse typedResponse = new NewTransmissionEventResponse();
                typedResponse.log = log;
                typedResponse.aggregatorRoundId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.answer = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.observations = (List<BigInteger>) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.observers = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.rawReportContext = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<NewTransmissionEventResponse> newTransmissionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWTRANSMISSION_EVENT));
        return newTransmissionEventFlowable(filter);
    }

    public List<OraclePaidEventResponse> getOraclePaidEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ORACLEPAID_EVENT, transactionReceipt);
        ArrayList<OraclePaidEventResponse> responses = new ArrayList<OraclePaidEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OraclePaidEventResponse typedResponse = new OraclePaidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.payee = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OraclePaidEventResponse> oraclePaidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OraclePaidEventResponse>() {
            @Override
            public OraclePaidEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ORACLEPAID_EVENT, log);
                OraclePaidEventResponse typedResponse = new OraclePaidEventResponse();
                typedResponse.log = log;
                typedResponse.transmitter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.payee = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OraclePaidEventResponse> oraclePaidEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORACLEPAID_EVENT));
        return oraclePaidEventFlowable(filter);
    }

    public List<OwnershipTransferRequestedEventResponse> getOwnershipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferRequestedEventResponse> responses = new ArrayList<OwnershipTransferRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferRequestedEventResponse>() {
            @Override
            public OwnershipTransferRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERREQUESTED_EVENT, log);
                OwnershipTransferRequestedEventResponse typedResponse = new OwnershipTransferRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferRequestedEventResponse> ownershipTransferRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERREQUESTED_EVENT));
        return ownershipTransferRequestedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<PayeeshipTransferRequestedEventResponse> getPayeeshipTransferRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYEESHIPTRANSFERREQUESTED_EVENT, transactionReceipt);
        ArrayList<PayeeshipTransferRequestedEventResponse> responses = new ArrayList<PayeeshipTransferRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayeeshipTransferRequestedEventResponse typedResponse = new PayeeshipTransferRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.proposed = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PayeeshipTransferRequestedEventResponse> payeeshipTransferRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PayeeshipTransferRequestedEventResponse>() {
            @Override
            public PayeeshipTransferRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYEESHIPTRANSFERREQUESTED_EVENT, log);
                PayeeshipTransferRequestedEventResponse typedResponse = new PayeeshipTransferRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.proposed = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PayeeshipTransferRequestedEventResponse> payeeshipTransferRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYEESHIPTRANSFERREQUESTED_EVENT));
        return payeeshipTransferRequestedEventFlowable(filter);
    }

    public List<PayeeshipTransferredEventResponse> getPayeeshipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYEESHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<PayeeshipTransferredEventResponse> responses = new ArrayList<PayeeshipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayeeshipTransferredEventResponse typedResponse = new PayeeshipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previous = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.current = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PayeeshipTransferredEventResponse> payeeshipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PayeeshipTransferredEventResponse>() {
            @Override
            public PayeeshipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PAYEESHIPTRANSFERRED_EVENT, log);
                PayeeshipTransferredEventResponse typedResponse = new PayeeshipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.transmitter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previous = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.current = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PayeeshipTransferredEventResponse> payeeshipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PAYEESHIPTRANSFERRED_EVENT));
        return payeeshipTransferredEventFlowable(filter);
    }

    public List<RemovedAccessEventResponse> getRemovedAccessEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEDACCESS_EVENT, transactionReceipt);
        ArrayList<RemovedAccessEventResponse> responses = new ArrayList<RemovedAccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemovedAccessEventResponse typedResponse = new RemovedAccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RemovedAccessEventResponse> removedAccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RemovedAccessEventResponse>() {
            @Override
            public RemovedAccessEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REMOVEDACCESS_EVENT, log);
                RemovedAccessEventResponse typedResponse = new RemovedAccessEventResponse();
                typedResponse.log = log;
                typedResponse.user = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RemovedAccessEventResponse> removedAccessEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVEDACCESS_EVENT));
        return removedAccessEventFlowable(filter);
    }

    public List<RequesterAccessControllerSetEventResponse> getRequesterAccessControllerSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUESTERACCESSCONTROLLERSET_EVENT, transactionReceipt);
        ArrayList<RequesterAccessControllerSetEventResponse> responses = new ArrayList<RequesterAccessControllerSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequesterAccessControllerSetEventResponse typedResponse = new RequesterAccessControllerSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequesterAccessControllerSetEventResponse> requesterAccessControllerSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RequesterAccessControllerSetEventResponse>() {
            @Override
            public RequesterAccessControllerSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REQUESTERACCESSCONTROLLERSET_EVENT, log);
                RequesterAccessControllerSetEventResponse typedResponse = new RequesterAccessControllerSetEventResponse();
                typedResponse.log = log;
                typedResponse.old = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.current = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RequesterAccessControllerSetEventResponse> requesterAccessControllerSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUESTERACCESSCONTROLLERSET_EVENT));
        return requesterAccessControllerSetEventFlowable(filter);
    }

    public List<RoundRequestedEventResponse> getRoundRequestedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROUNDREQUESTED_EVENT, transactionReceipt);
        ArrayList<RoundRequestedEventResponse> responses = new ArrayList<RoundRequestedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoundRequestedEventResponse typedResponse = new RoundRequestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.configDigest = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.epoch = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.round = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoundRequestedEventResponse> roundRequestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoundRequestedEventResponse>() {
            @Override
            public RoundRequestedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROUNDREQUESTED_EVENT, log);
                RoundRequestedEventResponse typedResponse = new RoundRequestedEventResponse();
                typedResponse.log = log;
                typedResponse.requester = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.configDigest = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.epoch = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.round = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoundRequestedEventResponse> roundRequestedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROUNDREQUESTED_EVENT));
        return roundRequestedEventFlowable(filter);
    }

    public List<ValidatorConfigSetEventResponse> getValidatorConfigSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VALIDATORCONFIGSET_EVENT, transactionReceipt);
        ArrayList<ValidatorConfigSetEventResponse> responses = new ArrayList<ValidatorConfigSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ValidatorConfigSetEventResponse typedResponse = new ValidatorConfigSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousValidator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.currentValidator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.previousGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currentGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ValidatorConfigSetEventResponse> validatorConfigSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ValidatorConfigSetEventResponse>() {
            @Override
            public ValidatorConfigSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VALIDATORCONFIGSET_EVENT, log);
                ValidatorConfigSetEventResponse typedResponse = new ValidatorConfigSetEventResponse();
                typedResponse.log = log;
                typedResponse.previousValidator = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.currentValidator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.previousGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.currentGasLimit = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ValidatorConfigSetEventResponse> validatorConfigSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALIDATORCONFIGSET_EVENT));
        return validatorConfigSetEventFlowable(filter);
    }

    public RemoteFunctionCall<String> LINK() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPTOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptPayeeship(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACCEPTPAYEESHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addAccess(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDACCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> billingAccessController() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BILLINGACCESSCONTROLLER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> checkEnabled() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CHECKENABLED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> decimals() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DECIMALS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> description() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESCRIPTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> disableAccessCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DISABLEACCESSCHECK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> enableAccessCheck() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENABLEACCESSCHECK, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getAnswer(BigInteger _roundId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETANSWER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_roundId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getBilling() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBILLING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> getRoundData(BigInteger _roundId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROUNDDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint80(_roundId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint80>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTimestamp(BigInteger _roundId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTIMESTAMP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_roundId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> hasAccess(String _user, byte[] _calldata) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASACCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.DynamicBytes(_calldata)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> latestAnswer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, byte[]>> latestConfigDetails() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTCONFIGDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint32>() {}, new TypeReference<Bytes16>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, byte[]>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, byte[]>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, byte[]>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (byte[]) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> latestRound() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTROUND, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> latestRoundData() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTROUNDDATA, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint80>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint80>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> latestTimestamp() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTTIMESTAMP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>> latestTransmissionDetails() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LATESTTRANSMISSIONDETAILS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes16>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint8>() {}, new TypeReference<Int192>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<byte[], BigInteger, BigInteger, BigInteger, BigInteger>(
                                (byte[]) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> linkAvailableForPayment() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LINKAVAILABLEFORPAYMENT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> maxAnswer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int192>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minAnswer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINANSWER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int192>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> oracleObservationCount(String _signerOrTransmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ORACLEOBSERVATIONCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _signerOrTransmitter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> owedPayment(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWEDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeAccess(String _user) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEACCESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _user)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requestNewRound() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REQUESTNEWROUND, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> requesterAccessController() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REQUESTERACCESSCONTROLLER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setBilling(BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBILLING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBillingAccessController(String _billingAccessController) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBILLINGACCESSCONTROLLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _billingAccessController)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setConfig(List<String> _signers, List<String> _transmitters, BigInteger _threshold, BigInteger _encodedConfigVersion, byte[] _encoded) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCONFIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_signers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_transmitters, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint8(_threshold), 
                new org.web3j.abi.datatypes.generated.Uint64(_encodedConfigVersion), 
                new org.web3j.abi.datatypes.DynamicBytes(_encoded)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPayees(List<String> _transmitters, List<String> _payees) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPAYEES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_transmitters, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_payees, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRequesterAccessController(String _requesterAccessController) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREQUESTERACCESSCONTROLLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _requesterAccessController)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setValidatorConfig(String _newValidator, BigInteger _newGasLimit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETVALIDATORCONFIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newValidator), 
                new org.web3j.abi.datatypes.generated.Uint32(_newGasLimit)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String _to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferPayeeship(String _transmitter, String _proposed) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERPAYEESHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter), 
                new org.web3j.abi.datatypes.Address(160, _proposed)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transmit(byte[] _report, List<byte[]> _rs, List<byte[]> _ss, byte[] _rawVs) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSMIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_report), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_rs, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_ss, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_rawVs)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> transmitters() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TRANSMITTERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> typeAndVersion() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TYPEANDVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> validatorConfig() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VALIDATORCONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint32>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawFunds(String _recipient, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWFUNDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawPayment(String _transmitter) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _transmitter)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static AccessControlledOffchainAggregator load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccessControlledOffchainAggregator(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static AccessControlledOffchainAggregator load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new AccessControlledOffchainAggregator(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static AccessControlledOffchainAggregator load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new AccessControlledOffchainAggregator(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static AccessControlledOffchainAggregator load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new AccessControlledOffchainAggregator(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<AccessControlledOffchainAggregator> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAccessController, BigInteger _decimals, String description) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAccessController), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.Utf8String(description)));
        return deployRemoteCall(AccessControlledOffchainAggregator.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<AccessControlledOffchainAggregator> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAccessController, BigInteger _decimals, String description) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAccessController), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.Utf8String(description)));
        return deployRemoteCall(AccessControlledOffchainAggregator.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AccessControlledOffchainAggregator> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAccessController, BigInteger _decimals, String description) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAccessController), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.Utf8String(description)));
        return deployRemoteCall(AccessControlledOffchainAggregator.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<AccessControlledOffchainAggregator> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger _maximumGasPrice, BigInteger _reasonableGasPrice, BigInteger _microLinkPerEth, BigInteger _linkGweiPerObservation, BigInteger _linkGweiPerTransmission, String _link, BigInteger _minAnswer, BigInteger _maxAnswer, String _billingAccessController, String _requesterAccessController, BigInteger _decimals, String description) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint32(_maximumGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_reasonableGasPrice), 
                new org.web3j.abi.datatypes.generated.Uint32(_microLinkPerEth), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerObservation), 
                new org.web3j.abi.datatypes.generated.Uint32(_linkGweiPerTransmission), 
                new org.web3j.abi.datatypes.Address(160, _link), 
                new org.web3j.abi.datatypes.generated.Int192(_minAnswer), 
                new org.web3j.abi.datatypes.generated.Int192(_maxAnswer), 
                new org.web3j.abi.datatypes.Address(160, _billingAccessController), 
                new org.web3j.abi.datatypes.Address(160, _requesterAccessController), 
                new org.web3j.abi.datatypes.generated.Uint8(_decimals), 
                new org.web3j.abi.datatypes.Utf8String(description)));
        return deployRemoteCall(AccessControlledOffchainAggregator.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class AddedAccessEventResponse extends BaseEventResponse {
        public String user;
    }

    public static class AnswerUpdatedEventResponse extends BaseEventResponse {
        public BigInteger current;

        public BigInteger roundId;

        public BigInteger updatedAt;
    }

    public static class BillingAccessControllerSetEventResponse extends BaseEventResponse {
        public String old;

        public String current;
    }

    public static class BillingSetEventResponse extends BaseEventResponse {
        public BigInteger maximumGasPrice;

        public BigInteger reasonableGasPrice;

        public BigInteger microLinkPerEth;

        public BigInteger linkGweiPerObservation;

        public BigInteger linkGweiPerTransmission;
    }

    public static class CheckAccessDisabledEventResponse extends BaseEventResponse {
    }

    public static class CheckAccessEnabledEventResponse extends BaseEventResponse {
    }

    public static class ConfigSetEventResponse extends BaseEventResponse {
        public BigInteger previousConfigBlockNumber;

        public BigInteger configCount;

        public List<String> signers;

        public List<String> transmitters;

        public BigInteger threshold;

        public BigInteger encodedConfigVersion;

        public byte[] encoded;
    }

    public static class NewRoundEventResponse extends BaseEventResponse {
        public BigInteger roundId;

        public String startedBy;

        public BigInteger startedAt;
    }

    public static class NewTransmissionEventResponse extends BaseEventResponse {
        public BigInteger aggregatorRoundId;

        public BigInteger answer;

        public String transmitter;

        public List<BigInteger> observations;

        public byte[] observers;

        public byte[] rawReportContext;
    }

    public static class OraclePaidEventResponse extends BaseEventResponse {
        public String transmitter;

        public String payee;

        public BigInteger amount;
    }

    public static class OwnershipTransferRequestedEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String from;

        public String to;
    }

    public static class PayeeshipTransferRequestedEventResponse extends BaseEventResponse {
        public String transmitter;

        public String current;

        public String proposed;
    }

    public static class PayeeshipTransferredEventResponse extends BaseEventResponse {
        public String transmitter;

        public String previous;

        public String current;
    }

    public static class RemovedAccessEventResponse extends BaseEventResponse {
        public String user;
    }

    public static class RequesterAccessControllerSetEventResponse extends BaseEventResponse {
        public String old;

        public String current;
    }

    public static class RoundRequestedEventResponse extends BaseEventResponse {
        public String requester;

        public byte[] configDigest;

        public BigInteger epoch;

        public BigInteger round;
    }

    public static class ValidatorConfigSetEventResponse extends BaseEventResponse {
        public String previousValidator;

        public String currentValidator;

        public BigInteger previousGasLimit;

        public BigInteger currentGasLimit;
    }
}
